basePath: /
definitions:
  handlers.PaginatedTodosResponse:
    properties:
      limit:
        type: integer
      order:
        type: string
      page:
        type: integer
      sort_by:
        type: string
      todos:
        items:
          $ref: '#/definitions/models.Todo'
        type: array
      total_pages:
        type: integer
      total_todos:
        type: integer
    type: object
  models.Categories:
    enum:
    - health
    - self development
    - finance
    - social
    type: string
    x-enum-varnames:
    - Health
    - SelfDev
    - Finance
    - Social
  models.Priorities:
    enum:
    - high
    - medium
    - low
    type: string
    x-enum-varnames:
    - High
    - Medium
    - Low
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  models.Todo:
    properties:
      category:
        $ref: '#/definitions/models.Categories'
      complete:
        type: boolean
      createdAt:
        type: string
      description:
        type: string
      dueDate:
        type: string
      id:
        type: integer
      priority:
        $ref: '#/definitions/models.Priorities'
      title:
        type: string
      userID:
        type: integer
    type: object
  models.TodoRequest:
    properties:
      category:
        $ref: '#/definitions/models.Categories'
      complete:
        type: boolean
      description:
        type: string
      dueDate:
        type: string
      priority:
        $ref: '#/definitions/models.Priorities'
      title:
        type: string
    type: object
  models.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A simple ToDo API built with Go and PostgreSQL.
  termsOfService: http://example.com/terms/
  title: ToDo API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            type: string
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Unable to create authentication token
          schema:
            type: string
      summary: Login user
      tags:
      - users
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            type: string
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to generate new token pair
          schema:
            type: string
      summary: Refresh access token
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            type: string
        "400":
          description: Invalid JSON
          schema:
            type: string
        "500":
          description: Problems registering user
          schema:
            type: string
      summary: Register a new user
      tags:
      - users
  /tasks:
    get:
      consumes:
      - application/json
      description: Get all todos with pagination, sorting, and filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by field (priority, category, createdat, duedate)
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      - description: Filter by priority (high, medium, low)
        in: query
        name: priority
        type: string
      - description: Filter by category (social, self development, finance, health)
        in: query
        name: category
        type: string
      - description: Filter by completion status
        in: query
        name: complete
        type: boolean
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedTodosResponse'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "401":
          description: Unauthorized - missing token
          schema:
            type: string
        "500":
          description: Failed to get the total number of to-dos
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get all todos with pagination
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo task
      parameters:
      - description: Todo object
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.TodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Todo successfully created
          schema:
            type: string
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized - missing token
          schema:
            type: string
        "500":
          description: Error trying to saving new To-do task
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Create a new todo
      tags:
      - todos
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo task by its ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Todo successfully deleted
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            type: string
        "401":
          description: Unauthorized - missing token
          schema:
            type: string
        "500":
          description: Error trying to delete todo
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Delete a todo by ID
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Get a todo task by its ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Invalid ID
          schema:
            type: string
        "401":
          description: Unauthorized - missing token
          schema:
            type: string
        "500":
          description: Error trying to get todo by ID
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Get a todo by ID
      tags:
      - todos
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
